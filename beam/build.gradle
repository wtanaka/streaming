plugins {
    // Upload new packages to bintray
    id "com.jfrog.bintray" version "1.7.3"
    // Build shadow jar for flink
    id "com.github.johnrengelman.shadow" version "1.2.4"
    // Pull current git version into gradle variable
    id 'com.palantir.git-version' version '0.7.0'
    // Releasing to Maven Central from Gradle without dealing with
    // Nexus UI
    id "io.codearte.nexus-staging" version "0.8.0"
}
apply plugin: 'java'
apply plugin: 'java-library'
// Code coverage
apply plugin: 'jacoco'
apply plugin: 'com.github.johnrengelman.shadow'
// Needed for bintray
apply plugin: 'maven-publish'
// Upload to Sonatype for Maven Central
apply plugin: 'maven'
// Signing required for Sonatype Maven Central Direct Upload
apply plugin: 'signing'

version gitVersion()
version = gitVersion()
group = 'com.wtanaka'
// def versionDetails = versionDetails()

project.ext["signing.keyId"] = '74B2DD02'
project.ext["signing.password"] = System.getenv("GPG_PASSPHRASE") ?: ""
project.ext["signing.secretKeyRingFile"] = file("../sec.gpg").absolutePath

jacocoTestCoverageVerification {
   violationRules {
      rule {
         limit {
            minimum = 0.8
         }
      }
   }
}

jacocoTestReport {
   reports {
      xml.enabled true
      csv.enabled false
   }
}

test {
   finalizedBy jacocoTestReport
}

bintray {
   user = System.getenv('BINTRAY_USER')
   key = System.getenv('BINTRAY_KEY')
   publications = ['MyPublication']
   publish = true
   override = true
   pkg {
      repo = 'maven'
      name = 'beam'
      userOrg = System.getenv('BINTRAY_USER')
      desc = 'Apache Beam Utility Code'
      licenses = ["GPL-3.0"]
      issueTrackerUrl = 'https://github.com/wtanaka/streaming/issues'
      vcsUrl = 'https://github.com/wtanaka/streaming.git'
      websiteUrl = 'https://wtanaka.com/beam'
      publicDownloadNumbers = true
      version {
         name = project.version
         released = new Date()
         gpg {
           sign = true
           // passphrase = ''
         }
      }
   }
}

task sourceJar(type: Jar) {
   from sourceSets.main.allJava
   classifier "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
   from javadoc.destinationDir
   classifier = 'javadoc'
}

artifacts {
   archives sourceJar
   archives javadocJar
}

signing {
   sign configurations.archives
}

def pomConfig = {
	 licenses {
		  license {
				name "GNU General Public License, Version 3.0"
				url "http://www.gnu.org/licenses/gpl-3.0.html"
				distribution "repo"
		  }
	 }
    developers {
        developer {
            id "wtanaka"
            name "wtanaka.com"
            email "wtanaka@yahoo.com"
        }
    }
    scm {
        connection "scm:git:git://github.com/wtanaka/streaming.git"
        developerConnection "scm:git:ssh://github.com:wtanaka/streaming.git"
        url "https://github.com/wtanaka/streaming/tree/master"
    }
}

// Used for bintray
publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            groupId 'com.wtanaka'
            artifactId 'beam'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Apache Beam Utility Code')
                root.appendNode('name', 'com.wtanaka.beam')
                root.appendNode('url', 'https://wtanaka.com/beam')
                root.children().last() + pomConfig
            }
        }
    }
}

uploadArchives {
   repositories {
      mavenDeployer {
         beforeDeployment {
            MavenDeployment deployment -> signing.signPom(deployment)
         }

         repository(url:
            "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: System.getenv('OSSRH_USER'),
                  password: System.getenv('OSSRH_PASSWORD'))
         }

         snapshotRepository(url:
            "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: System.getenv('OSSRH_USER'),
                  password: System.getenv('OSSRH_PASSWORD'))
         }

         pom.project {
            name 'com.wtanaka.beam'
            packaging 'jar'
            artifactId 'beam'
            description 'Apache Beam Utility Code'
            url 'https://wtanaka.com/beam'

            scm {
               connection "scm:git:git://github.com/wtanaka/streaming.git"
               developerConnection "scm:git:ssh://github.com:wtanaka/streaming.git"
               url "https://github.com/wtanaka/streaming/tree/master"
            }

            licenses {
               license {
                  name "GNU General Public License, Version 3.0"
                  url "http://www.gnu.org/licenses/gpl-3.0.html"
                  distribution "repo"
               }
            }

            developers {
               developer {
                  id "wtanaka"
                  name "wtanaka.com"
                  email "wtanaka@yahoo.com"
               }
            }
         }
      }
   }
}

nexusStaging {
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'org.apache.beam:beam-sdks-java-core:0.6.0'
    // hadoop is needed for extensions-sorter, see BEAM-1859
    compile 'org.apache.hadoop:hadoop-core:0.20.2'
    compile 'org.apache.beam:beam-sdks-java-extensions-sorter:0.6.0'



    compile 'org.apache.beam:beam-runners-direct-java:0.6.0'
    compile 'org.slf4j:slf4j-log4j12:1.7.14'

    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.beam:beam-runners-direct-java:0.6.0'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.slf4j:slf4j-api:1.7.14'
    testCompile 'org.slf4j:slf4j-jdk14:1.7.14'
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

test.finalizedBy "jacocoTestCoverageVerification"
